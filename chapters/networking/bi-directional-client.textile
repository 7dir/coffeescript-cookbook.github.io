---
layout: recipe
title: Bi-Directional Client
chapter: Networking
---

h2. Problem

You want to access a service that provides a persistent connection over the network.


h2. Solution

Create a bi-directional TCP client.

h3. Node.js

{% highlight coffeescript %}
net = require 'net'

domain = 'localhost'
port = 9001

ping = (socket, delay) ->
	console.log "Pinging server"
	socket.write "Ping"
	nextPing = -> ping(socket, delay)
	setTimeout nextPing, delay

connection = net.createConnection port, domain

connection.on 'connect', () ->
	console.log "Opened connection to #{domain}:#{port}"
	ping connection, 2000

connection.on 'data', (data) ->
	console.log "Received: #{data}"

connection.on 'end', (data) ->
	console.log "Connection closed"
	process.exit()
{% endhighlight %}

h3. Example Usage

Accessing the <a href="/chapters/networking/bi-directional-server.html">Bi-Directional Server</a>:

*$ coffee bi-directional-client.coffee*
Opened connection to localhost:9001
Pinging server
Received: You have 0 peers on this server
Pinging server
Received: You have 0 peers on this server
Pinging server
Received: You have 0 peers on this server
[...]
Connection closed

h2. Discussion

This particular example initiates contact with the server and starts the conversation in the _on 'connect'_ handler.  The bulk of the work in a real client, however, will lie in the _on 'data'_ handler, which processes output from the server.

See also the <a href="/chapters/networking/bi-directional-server.html">Bi-Directional Server</a>, the <a href="/chapters/networking/basic-client.html">Basic Client</a>, and the <a href="/chapters/networking/basic-server.html">Basic Server</a> recipes.

h3. Exercises
* Add support for choosing the target domain and port based on command-line arguments or from a configuration file.
