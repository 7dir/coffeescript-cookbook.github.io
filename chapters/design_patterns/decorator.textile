---
layout: recipe
title: Decorator Pattern
chapter: Design Patterns
---

h2. Problem

You have a set of data that you need to process in multiple, possibly varying ways.


h2. Solution

Use the Decorator pattern to structure the application of changes.

{% highlight coffeescript %}
MiniMarkdown = (line) ->
    if match = line.match /^(#+)\s*(.*)$/
        headerLevel = match[1].length
        headerText = match[2]
        "<h#{headerLevel}>#{headerText}</h#{headerLevel}>"
    else
        if line.length > 0
            "<p>#{line}</p>"
        else
            ''

StripComments = (line) ->
    line.replace /\s*\/\/.*$/, ''

TextProcessor = (processors) ->
    processors: processors
    reducer: (existing, processor) ->
        if processor
            processor(existing or '')
        else
            existing
    processLine: (text) ->
        this.processors.reduce this.reducer, text
    processString: (text) ->
        (this.processLine(line) for line in text.split("\n")).join("\n")

exampleText = '''
              # A level 1 header
              A regular line
              // a comment
              ## A level 2 header
              A line // with a comment
              '''

processor = new TextProcessor [StripComments, MiniMarkdown]

processor.processString exampleText

# => "<h1>A level 1 header</h1>\n<p>A regular line</p>\n\n<h2>A level 2 header</h2>\n<p>A line</p>"
{% endhighlight %}

h2. Discussion

With the TextProcessor object ready to wrangle all of the text processors together, the miniMarkdown, stripComments, and any future functions can focus exclusively on handling nothing but a single line of text.  Future developers only have to write functions that return a string and add it to the array of processors in order to partake in the process.

We can even modify the existing Decorator object on the fly:

{% highlight coffeescript %}
smilies =
    ':)' : "smile"
    ':D' : "huge_grin"
    ':(' : "frown"
    ';)' : "wink"

smilieExpander = (line) ->
    if line
        (line = line.replace symbol, "{#{text}}") for symbol, text of smilies
    line

processor.processors.unshift smilieExpander

processor.processString "# A header that makes you :) // you may even laugh"

# => '<h1>A header that makes you {smile}</h1>'
{% endhighlight %}
